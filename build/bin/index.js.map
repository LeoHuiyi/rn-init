{"version":3,"sources":["index.js"],"names":["name","options","root","resolve","console","log","yellow","initProject","sync","projectName","stdio","status","process","chdir","installPackages","concat","packages","green","generatorDir","__dirname","copy","join","cwd","exit","createProject","pkgs","JSON","parse","readFileSync","forEach","pv","item","push","argv","slice","_","exitStatus","pathExistsSync","start","property","message","validator","warning","default","get","err","result","yesno","rm"],"mappings":"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","file":"index.js","sourcesContent":["\n\n/*\n * @Author: uncoder \n * @Date: 2018-01-24 11:57:17 \n * @Last Modified by: uncoder\n * @Last Modified time: 2018-01-25 15:33:13\n */\nimport ProgressBar from 'progress';\nimport minimist from 'minimist';\nimport spawn from 'cross-spawn';\nimport path from 'path';\nimport chalk from 'chalk';\nimport fse from 'fs-extra';\nimport prompt from 'prompt';\n\n// 自定义依赖包\nconst pkgs = JSON.parse(fse.readFileSync(path.resolve(__dirname, '../pkgs.json')));\nconst packages = [];\nObject.keys(pkgs).forEach(item => {\n    const pv = `${item}@${pkgs[item]}`\n    packages.push(pv);\n});\n// 获取参数\nconst options = minimist(process.argv.slice(2));\n// 项目名称\nconst projectName = options._[1];\n\n// 检查是否已经存在\nconst exitStatus = fse.pathExistsSync(projectName);\nif (exitStatus) {\n    prompt.start();\n\n    var property = {\n        name: 'yesno',\n        message: '目录 ' + projectName + ' 已经存在了,是否继续(y or n)?',\n        validator: /y[es]*|n[o]?/,\n        warning: '你必须回答 yes or no',\n        default: 'no'\n    };\n\n    prompt.get(property, function (err, result) {\n        if (result.yesno[0] === 'y') {\n            const rm = spawn.sync('rm', ['-rf', projectName]);\n            createProject(projectName, options);\n        } else {\n            console.log('项目初始化终止');\n            process.exit();\n        }\n    });\n} else {\n    createProject(projectName, options);\n}\n\nasync function createProject(name, options) {\n    const root = path.resolve(name);\n    console.log(chalk.yellow(`第一步使用官方的react-native初始化项目`));\n    // 初始化项目\n    const initProject = spawn.sync('react-native', ['init', projectName], { stdio: 'inherit' });\n    try {\n        if (initProject.status == 0) {\n            console.log(chalk.yellow(`第二步自定义依赖库安装！`));\n            // 安装依赖包\n            process.chdir(root);\n            const installPackages = spawn.sync('yarn', ['add'].concat(packages), { stdio: 'inherit' });\n            if (installPackages.status == 0) {\n                console.log(chalk.green(`自定义依赖库安装完成！`));\n                console.log(chalk.yellow(`第三步拷贝脚手架！`));\n                // console.log(\"执行shell命令的绝对路径:\", process.cwd());\n                const generatorDir = path.resolve(__dirname, '../..');\n                // console.log(\"js文件执行的绝对路径\", generatorDir);\n                await fse.copy(path.join(generatorDir, 'template'), process.cwd());\n                console.log(chalk.green(`项目 ${name} 创建成功！`));\n                process.exit();\n            }\n        }\n    } catch (error) {\n        process.exit();\n    }\n}\n\n\n"]}